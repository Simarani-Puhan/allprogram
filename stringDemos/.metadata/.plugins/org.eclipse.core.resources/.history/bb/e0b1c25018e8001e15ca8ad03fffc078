package com.insuranceapp.exceptions;

import java.time.LocalDateTime;

import org.springframework.beans.TypeMismatchException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.insuranceapp.model.APIErrors;
@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler{

	@Override
	protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		LocalDateTime timeStamp=LocalDateTime.now();
		HttpStatus statusMessage=HttpStatus.valueOf(status.value());
		APIErrors errors=new APIErrors(timeStamp,status.value(),ex.getMessage(),statusMessage);
				headers.add("error", "method not allowed");
		return super.handleHttpRequestMethodNotSupported(ex, headers, status, request);
	}

	@Override
	protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		LocalDateTime timeStamp=LocalDateTime.now();
		HttpStatus statusMessage=HttpStatus.valueOf(status.value());
		APIErrors errors=new APIErrors(timeStamp,status.value(),ex.getMessage(),statusMessage);
				headers.add("error", "Media Type Not Supported");
		return super.handleHttpMediaTypeNotSupported(ex, headers, status, request);
	}

	@Override
	protected ResponseEntity<Object> handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders headers,
			HttpStatusCode status, WebRequest request) {
			LocalDateTime timeStamp=LocalDateTime.now();
			HttpStatus statusMessage=HttpStatus.valueOf(status.value());
			APIErrors errors=new APIErrors(timeStamp,status.value(),ex.getMessage(),statusMessage);
					headers.add("error", "Missing Path Variable");
		return ResponseEntity.status(status).headers(headers).body(errors);
	}

	@Override
	protected ResponseEntity<Object> handleMissingServletRequestParameter(MissingServletRequestParameterException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		LocalDateTime timeStamp=LocalDateTime.now();
		HttpStatus statusMessage=HttpStatus.valueOf(status.value());
		APIErrors errors=new APIErrors(timeStamp,status.value(),ex.getMessage(),statusMessage);
				headers.add("error", "Missing Servlet Request Parameter");
		return super.handleMissingServletRequestParameter(ex, headers, status, request);
	}

	@Override
	protected ResponseEntity<Object> handleTypeMismatch(TypeMismatchException ex, HttpHeaders headers,
			HttpStatusCode status, WebRequest request) {
			LocalDateTime timeStamp=LocalDateTime.now();
			HttpStatus statusMessage=HttpStatus.valueOf(status.value());
			APIErrors errors=new APIErrors(timeStamp,status.value(),ex.getMessage(),statusMessage);
					headers.add("error", "handle Type Mismatch");
		return super.handleTypeMismatch(ex, headers, status, request);
	}

}
